{"meta":{"title":"唯梦依癸的博客","subtitle":"","description":"Jcm","author":"JCM","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-02-06T08:50:36.321Z","updated":"2023-02-06T08:50:36.321Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"about","date":"2023-02-06T02:14:40.000Z","updated":"2023-02-06T02:24:01.449Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2023-02-06T02:25:57.749Z","updated":"2023-02-06T02:25:57.749Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有分类","date":"2023-02-06T02:30:40.378Z","updated":"2023-02-06T02:30:40.378Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-02-06T02:25:25.705Z","updated":"2023-02-06T02:25:25.705Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"c#笔记day5","slug":"c-笔记day5","date":"2023-02-12T11:44:56.000Z","updated":"2023-02-11T14:46:19.350Z","comments":true,"path":"2023/02/12/c-笔记day5/","link":"","permalink":"http://example.com/2023/02/12/c-%E7%AC%94%E8%AE%B0day5/","excerpt":"","text":"c#笔记day5","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"c#","slug":"c","permalink":"http://example.com/tags/c/"}],"author":"JCM"},{"title":"c#笔记day4","slug":"c-笔记day4","date":"2023-02-11T12:04:17.000Z","updated":"2023-02-11T14:44:18.663Z","comments":true,"path":"2023/02/11/c-笔记day4/","link":"","permalink":"http://example.com/2023/02/11/c-%E7%AC%94%E8%AE%B0day4/","excerpt":"","text":"c#笔记day4一：三元表达式。（注意整个三元表达式的结果类型和表达式2、3的结果类型一致） 二：产生随机数。（先new创建一个对象，然后调用Random类的next方法）123Random r= new Random();int rNumber=r.Next(1,10); //产生范围是左闭右开的区间，故此次范围为1~9，Console.WriteLine(rNumber); //随机输出1~9内的数 三：常量，只能赋初值，后续就不能再被赋值。 1234int number = 10;number = 20; //体现了变量可以被重新赋值const int numberTwo = 30; //常量，只能赋初值，不能够被重新赋值//numberTwo=90; //会报错，因为numberTwo是常量 四：枚举。（重要，unity使用多）1.概念和使用。 1234567891011121314151617namespace c_sharp_learning_first_day2&#123; public enum Gender //多写在命名空间下面，这样一个项目下的不同类中都能使用 &#123; 男, 女 &#125; internal class Program &#123; static void Main(string[] args) &#123; Gender gender = Gender.男; //调用 Console.WriteLine(gender); Console.ReadKey(); //暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在控制台中 &#125; &#125;&#125; 2.enum中的值转int类型，默认在没赋值情况从0开始，后续递增+1。12345678910111213141516171819202122232425namespace c_sharp_learning_first_day2&#123; public enum QQState //多写在命名空间下面，这样一个项目下的不同类都能使用 &#123; OnLine=2, //默认未赋值为0，但此次赋值为2 OffLine, Leave=5, Busy, QMe, &#125; internal class Program &#123; static void Main(string[] args) &#123; QQState qqState = QQState.OnLine; //调用赋值 Console.WriteLine((int)qqState); //输出2 Console.WriteLine((int)QQState.OffLine); //输出3=2+1 Console.WriteLine((int)QQState.Leave); //输出5 Console.WriteLine((int)QQState.Busy); //输出6=5+1 Console.WriteLine((int)QQState.QMe); //输出7=5+2 Console.ReadKey(); //暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在控制台中 &#125; &#125;&#125; 3.int转枚举同理，但如果int值超过枚举的数量，那么仍然输出int值。12345678910111213141516171819202122232425namespace c_sharp_learning_first_day2&#123; public enum QQState //多写在命名空间下面，这样一个项目下的不同类都能使用 &#123; OnLine, OffLine, Leave, Busy, QMe, &#125; internal class Program &#123; static void Main(string[] args) &#123; int a = 3; int b = 8; QQState qqState1 = (QQState)a; //将int类型转为QQState类型 QQState qqState2 = (QQState)b; //将int类型转为QQState类型 Console.WriteLine(qqState1); //输出Busy Console.WriteLine(qqState2); //输出8 Console.ReadKey(); //暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在控制台中 &#125; &#125;&#125; 4.任何类型都能够调用.ToString()转换为字符串类型。123int n1 = 10;string s=n1.ToString(); //所有的类型都能够调用ToString转换为字符串类型Console.WriteLine(s); //输出字符串类型10 5.字符串类型转enum枚举类型。123string s = &quot;0&quot;; //如果转换的字符串内容是数字，就算枚举中没有，也不会抛异常；如果转换的字符串是文本，若枚举中没有，则会抛异常QQState state=(QQState)Enum.Parse(typeof(QQState), s); //Enum.Parse先获取QQState的类型，然后转为字符串类型，最后前面还要申明要转的是QQState类型Console.WriteLine(state); //输出OnLine 五：结构体struct。 1234567891011121314151617public struct Person&#123; public string _name; //字段 public int _age; public char _gender;&#125;internal class Program&#123; static void Main(string[] args) &#123; Person zsPerson; //定义变量方法和int、double等一样 zsPerson._name = &quot;张三&quot;; zsPerson._age = 21; zsPerson._gender = &#x27;男&#x27;; Console.ReadKey(); //暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在控制台中 &#125;&#125; 六：数组，对于int类型，默认初值是0；对于string类型，默认初值是null；对于bool类型，默认初值是false。1.声明和基本使用。12345678910//数组类型[] 数组名=new 数组类型[数组长度];int[] nums=new int[10];//第二种数组声明方式直接声明初值int[] numsTwo = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;for(int i = 0; i &lt; nums.Length; i++) //nums.Length就是数组的长度&#123; nums[i] = i; Console.WriteLine(nums[i]);&#125; 2.使用Array类实现数组升序和降序排序，Array.Sort方法可以实现数组的升序，而Array.Reverse的作用是将数组内元素反转，所以两种搭配起来可以实现降序。1234567int[] numsTwo = &#123; 1, 2, 3, 5, 4, 6, 8, 9, 7 &#125;;Array.Sort(numsTwo); //将数组内的元素升序排序Array.Reverse(numsTwo); //将数组内元素反转，配合上面的sort实现降序排序for(int i = 0; i &lt; numsTwo.Length; i++) //nums.Length就是数组的长度&#123; Console.WriteLine(numsTwo[i]); //输出9，8，7，6，5，4，3，2，1&#125; 七：方法。 123456789101112131415161718static void Main(string[] args)&#123; int a=Program.GetMax(int.Parse(Console.ReadLine()), int.Parse(Console.ReadLine())); //静态的方法使用类名.方法名调用 Console.WriteLine(a); Console.ReadKey(); //暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在控制台中&#125;/// &lt;summary&gt;/// 计算两个整数之间的最大值并且将最大值返回/// &lt;/summary&gt;/// &lt;param name=&quot;n1&quot;&gt;第一个整数&lt;/param&gt;/// &lt;param name=&quot;n2&quot;&gt;第二个整数&lt;/param&gt;/// &lt;returns&gt;两种整数的最大值&lt;/returns&gt;public static int GetMax(int n1,int n2) //静态方法&#123; return n1&gt;n2 ? n1 : n2;&#125; 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"c#","slug":"c","permalink":"http://example.com/tags/c/"}],"author":"JCM"},{"title":"c#笔记day3","slug":"c-笔记day3","date":"2023-02-10T06:26:53.000Z","updated":"2023-02-11T08:14:36.873Z","comments":true,"path":"2023/02/10/c-笔记day3/","link":"","permalink":"http://example.com/2023/02/10/c-%E7%AC%94%E8%AE%B0day3/","excerpt":"","text":"c#笔记day3一：分支结构。1. if结构，先判断后执行，有可能不执行。 2.if-else结构，先判断后执行，else代表不满足if条件的其余所有情况，且else仅和离它最近的if配对。 3.if-else if-else结构，先判断if内容，再判断else if中，最后再判断else（所以有时else可以省略）。 二：异常捕获。如：输入abc等非数字类型就会抛异常。 12int a=Convert.ToInt32(Console.ReadLine()); //如果输入abc等非数字类型就会抛异常Console.WriteLine(a); 1.使用try和catch进行异常处理。1234567891011121314int a=0;bool flag = true;try&#123; a = Convert.ToInt32(Console.ReadLine()); //如果输入abc等非数字类型就会抛异常,然后立刻跳到catch块中 a = -a;&#125;catch&#123; //如果上面try块出现异常，则会跳到这里面执行 Console.WriteLine(&quot;有异常&quot;); flag = false;&#125;if(flag)&#123; Console.WriteLine(a);&#125; 三：选择结构。1.switch-case结构。 四：循环结构。1. while循环，如果循环括号内满足，则执行while循环中内容，执行一轮后，返回while循环，故如果一直满足循环的条件，可能会导致死循环。 2.for循环，正确执行后的顺序：表达式1-&gt;表达式2-&gt;循环体-&gt;表达式3-&gt;表达式2-&gt;…。注：表达式1声明循环变量必须存在（可以率先在外创建赋值），表达式2或3的条件可以不写； 3.break可以结束跳出离本层最近的for和while循环。4.而continue会跳出本轮的循环，进行下一轮循环（break是直接跳出全部的循环）。五：断点调试。（重要）1. 方法。（1）按F11键打开调试，然后再代码中每按一次F11都会执行下一行代码，左下角处的监视模块中你可以输入你想监视的变量值；（2）如下图中，黄色的行是当前待被调试的行，即下次按F11所要调试的行； 2.断点：程序运行的中断处，后续运行就是要按F11进行调试。（1）鼠标点击左侧来添加断点，然后按F5进行正常运行，运行到断点处程序就会停止，接下来按F11正常调试即可。 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"c#","slug":"c","permalink":"http://example.com/tags/c/"}],"author":"JCM"},{"title":"c#笔记day2","slug":"c-笔记day2","date":"2023-02-09T12:02:26.000Z","updated":"2023-02-10T15:02:18.839Z","comments":true,"path":"2023/02/09/c-笔记day2/","link":"","permalink":"http://example.com/2023/02/09/c-%E7%AC%94%E8%AE%B0day2/","excerpt":"","text":"c#笔记day2一：基本符号。1. +号的使用。12Console.WriteLine(5 + &quot;5&quot;); //输出的是55,这里+号起了连接作用Console.WriteLine(5 + 5); //输出的是10,这里+号起了运算作用 2.占位符{}，占位符内的0,1,2,…代表的是顺序。1234int a = 55, b = 56, c = 57;Console.WriteLine(&quot;第一个数字是&quot; +a+&quot;,第二个数字是&quot;+b+&quot;,第三个数字是&quot;+c); //未使用占位符，只能使用+进行连接Console.WriteLine(&quot;第一个数字是&#123;0&#125;,第二个数字是&#123;1&#125;,第三个数字是&#123;2&#125;&quot;, a, b, c); //使用了占位符&#123;&#125;，除文字外输出的具体数字顺序为55(a)，56(b)，57(c)Console.WriteLine(&quot;第一个数字是&#123;0&#125;,第二个数字是&#123;2&#125;,第三个数字是&#123;1&#125;&quot;, a, b, c); //使用了占位符&#123;&#125;，除文字外输出的具体数字顺序为55(a)，57(c)，56(b) 3.Console.ReadLine()接收用户输入，但只能以字符串string类型接收。12string name = Console.ReadLine(); //接收用户输入，但只能以字符串string类型接收Console.WriteLine(name); //输出用户方才输入内容 4.常用转义符：指的是用一个’\\‘+一个特殊的字符，组成一个具有特殊意义的字符。（1）\\n：表示换行。1Console.WriteLine(&quot;换行\\n&quot;); //转义符\\n写在字符串内 （2）\\“：表示一个英文半角的双引号。1Console.WriteLine(&quot;换行\\&quot;&quot;); //输出换行&quot; （3）\\t：表示一个tab键的空格，常用来手动对齐。1Console.WriteLine(&quot;换行\\t换行&quot;); //输出换行 换行 （4）\\b：表示一个退格键，文字需要两个\\b才有效果，而数字只需一个\\b，且放到字符串两边没有效果。123Console.WriteLine(&quot;换行\\b\\b换行&quot;); //输出换换行Console.WriteLine(&quot;换行6\\b换行&quot;); //输出换行换行Console.WriteLine(&quot;\\b换行6\\b换行\\b&quot;); //输出换行换行 （5）\\\\：表示一个\\，如果前面添加一个@符号，可以取消\\在字符串中的转义作用。12Console.WriteLine(&quot;输出\\\\&quot;); //输出\\Console.WriteLine(@&quot;输出\\\\&quot;); //输出\\\\ 二：类型转换。1.两种类型兼容，如int和double。（都为数字类型）（1）自动&#x2F;隐式类型转换（小–&gt;大）：int–&gt;double，改变不会加小数点。1234int n1 = 10;int n2 = 3;double d = n1 / n2;Console.WriteLine(d); //输出3，而不是3.0，因为右侧n1/n2结果就是整数，赋给左边是隐式类型转换，但不会改变值 （2）显示&#x2F;强制类型转换（大–&gt;小）：double–&gt;int，将某个操作数提升为double类型，整体都会成为double类型。1234int n1 = 10;int n2 = 3;double d = n1*1.0 / n2; //整数乘1.0就可以提升为double类型Console.WriteLine(d); //输出3.33333 （3）同种类型，也也可以直接在括号中填写要转换的类型，如(int)、(double)。1234int a = 10;int b = 3;double c = (double)a / b; //同种类型，也可以直接在括号中填写要转换的类型Console.WriteLine(c); //输出3.33333 （4）double保留小数点位数，只需要在占位符后面加上:0.00（看点号后零的个数，这决定小数点位数）。12345int n1 = 10;int n2 = 3;double a = n1*1.0 / n2; //整数乘1.0就可以提升为double类型double b = 2;Console.WriteLine(&quot;&#123;0:0.00&#125;,&#123;1:0.00&#125;&quot;,a,b); //输出3.33,2.00 2.两种类型不兼容。(1)Convert类型转换，在类型不兼容情况下使用Convert.ToXXX进行转换（如string–&gt;double），Convert类的方法很多，如ToDouble、ToDateTime、ToInt32等。12345string s = &quot;123&quot;;double d=Convert.ToDouble(s); //将字符串类型转换为double类型Console.WriteLine(d); //输出123int n = Convert.ToInt32(s); //将字符串类型转换为int类型Console.WriteLine(n); //输出123 （2）使用int类的方法，如int.Parse或int.TryParse（推荐）实现由字符串到数字类型的转换。1234int a=0;bool b=int.TryParse(Console.ReadLine(), out a); //将括号左边的字符串类型转换成整数放到右边的变量中，整体输出的int.TryParse是bool型Console.WriteLine(b); //如果输入内容不是整数，则不会报异常会输出false，比int.Parse和Convert.ToInt32安全Console.WriteLine(a); //a中是转换后的内容 三：简单运算符。1. 一元运算符，++（自增）、- -（自减），优先级大于+、-、*、&#x2F;。（1）++和–都分为前++、后++或前- -后- -，所得到的内容是不同的，前++是先+1后运算，而后++是先运算再+1。（–同理）前++： 1234int number = 10;int result = ++number + 10; //++number是先+1再运算，故此次++number + 10=21Console.WriteLine(number); //输出11Console.WriteLine(result); //输出21 后++： 1234int number = 10;int result = 10 + number++ ; //number++是先运算再+1，故此次10+ number++=20Console.WriteLine(number); //输出11Console.WriteLine(result); //输出20 2.关系运算符。（1）bool变量和&#x3D;&#x3D;关系运算符。1234bool result = 3 &gt; 1000;bool a = 20 == 30; // ==是关系运算符，表示问是否相等Console.WriteLine(result); //输出FalseConsole.WriteLine(a); //输出False 2. 逻辑运算符。（两边一般都是关系表达式或bool类型的值）（1）&amp;&amp;–&gt;与，有0出0，全1出1。123bool result = 3 &gt; 1000; //result为Falsebool a = 20 == 30; //a为FalseConsole.WriteLine(result &amp;&amp; a); //与是有0出0，两个全为False，所以输出False （2）||–&gt;或，有1出1，全0出0。123bool result = 3 &gt; 1000; //result为Falsebool a = 20 == 30; //a为FalseConsole.WriteLine(result || !a); //或有1出1，result为False，而!a为True，所以输出True （3）！–&gt;非，取反，1变0，0变1。123bool result = 3 &gt; 1000; //result为Falsebool a = 20 == 30; //a为FalseConsole.WriteLine(result || !a); //或有1出1，result为False，而!a为True，所以输出True （4）判断闰年题：闰年是能被400整除或能被4整除但不能被100整除的年份。1234Console.WriteLine(&quot;请输入年份!&quot;);int year = Convert.ToInt32(Console.ReadLine());bool a=(year%400==0)||(year%4==0)&amp;&amp;(year%100!=0); //判断闰年Console.WriteLine(a); 4.复合逻辑运算符。（1）+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;。123int a = 10;a += 20; //即a=a+20，其余-、*、/同理Console.WriteLine(a); //输出30 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"c#","slug":"c","permalink":"http://example.com/tags/c/"}],"author":"JCM"},{"title":"c#笔记day1","slug":"c-笔记day1","date":"2023-02-08T12:09:42.000Z","updated":"2023-02-10T14:41:54.326Z","comments":true,"path":"2023/02/08/c-笔记day1/","link":"","permalink":"http://example.com/2023/02/08/c-%E7%AC%94%E8%AE%B0day1/","excerpt":"","text":"c#笔记day1一：认识c#代码的组成部分。 二：Main中的两行代码，Console.WriteLine输出会自动换行，而Console.Write输出不会换行。1234static void Main(string[] args)&#123; Console.WriteLine(&quot;Hello World&quot;); //在控制台的一行中输出内容：Hello World Console.ReadKey(); //暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在控制台中&#125; 三：VS的基本设置。1. 对于项目较多时，如果你不想项目存在，但是又不想删除，可以右键将其暂时卸载，后续恢复也是按右键选择恢复。 2.运行可以按F5，也可以点击上方的绿色三角形，左侧可以选择要运行的项目；调试按键是F11，停止运行可以按红色正方形。 3.常用快捷键。 （1）Ctrl+K+D自动代码对齐，鼠标点到代码，然后一直按着Ctrl，然后按K，松开按D即可（不能K和D一起按，必须保证按D的时候，K已经松开）。（2）#Region和#EndRegion，可以实现折叠冗余代码。（注意#Region后面加一个空格，然后就可以填写注释内容）（3）F1打开官方文档查看也很重要，不会的代码，可以选中按F1。四：注释。1. 单行注释 &#x2F;&#x2F;。2. 多行注释 &#x2F;*要注释的内容*&#x2F;。3. 文本注释 &#x2F;&#x2F;&#x2F; 多用来解释类或方法。 五：变量。1.存储变量的语法：变量类型 变量名; 变量名&#x3D;值; 简写：变量类型 变量名&#x3D;值; 注：此处的’&#x3D;’号，不表示等于的意思，表示的是赋值的意思，即把等号右边的值赋值给等号左边的变量。 2.数据类型。（1）整数类型：int。（2）小数类型：double或float，但float后面要加一个后缀f&#x2F;F，如float x&#x3D;3.56f。（3）金钱类型：decimal，记得值后面需要加上一个m，如decimal money&#x3D;500m。（4）字符串类型：string，可以存储空，以英文半角状态下的双引号括起来。（5）字符类型：char，不能存储空，以英文半角状态下的单引号括起来。3.变量命名。（1）以字母、下划线或@开头，不要以数字开头；后面可以跟字母、数字、下划线(不能跟空格)，也不能出现特殊符号。（2）Camel命名法(对变量命名)：第一个单词的首字母小写，后续单词的首字母都大写。（3）Pascal命名法(对方法或类命名)：每个单词的首字母都大写。 4.变量交换。（1）如交换a、b两个变量的值，可以用一个中间变量进行过渡。1234567int a = 10;int b = 20;int temp; //中间变量temp = a;a = b;b = temp;Console.WriteLine(&quot;&#123;0&#125;,&#123;1&#125;&quot;,a,b); //输出的a、b分别是20和10 （2）可以用加减方法实现交换：a&#x3D;a-b,b&#x3D;a+b,a&#x3D;b-a。123456int a = 10;int b = 20;a = a - b;b = a + b;a = b - a;Console.WriteLine(&quot;&#123;0&#125;,&#123;1&#125;&quot;,a,b); //输出的a、b分别是20和10 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"c#","slug":"c","permalink":"http://example.com/tags/c/"}],"author":"JCM"},{"title":"VS2022和Github代码仓库的上传同步教程","slug":"VS2022和Github代码仓库的上传同步教程","date":"2023-02-08T07:24:51.000Z","updated":"2023-02-08T11:57:02.064Z","comments":true,"path":"2023/02/08/VS2022和Github代码仓库的上传同步教程/","link":"","permalink":"http://example.com/2023/02/08/VS2022%E5%92%8CGithub%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%90%8C%E6%AD%A5%E6%95%99%E7%A8%8B/","excerpt":"","text":"VS2022和Github代码仓库的上传同步1.使用visual studio，具体下载安装过程就不说了，新建项目，然后创建源代码模板进来后，点击右下角的添加到源代码管理，选择git。 2.进来后，把下面的信息github 相连即可，然后创建并推送，然后就会在github你的存储库中创建成功。 3.在vs中，右下角就会发生变化。 4.点击右下角的小笔，然后右边栏就会变为Git更改。 5.修改代码后，由vs上传到github上。（1）如果我对正文的程序段进行了修改，右下角小笔数字就会变化。（2）然后如果要上传修改到github上，先在下面的2区域中填上备注，然后点击全部提交。（3）在点击下面4区域的上传箭头（推送），就可以同步到github上。 6. 在github上修改，然后由github同步到vs上。（1）在github中，点击小笔修改内容，写完保存。 （2）然后在vs中点击向下的箭头（拉取），就可以自动把github中的内容同步到vs中了！ 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"}],"author":"JCM"},{"title":"Makedown语法学习教程","slug":"Makedown语法学习教程","date":"2023-02-07T01:42:21.000Z","updated":"2023-02-07T05:33:05.517Z","comments":true,"path":"2023/02/07/Makedown语法学习教程/","link":"","permalink":"http://example.com/2023/02/07/Makedown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/","excerpt":"","text":"Typora-结构类操作一：多级标题。(2个知识点)1.一种是’#’+‘ ’（空格）+“XXX”;2.另一种就是快捷键的ctrl+1~6方式对应生成相应等级标题。注：快捷键仅能在Typora等软件中使用，因为你可以在软件上方栏的段落中看到。 3.文字居中，只需要设置相应文字格式后，在前面加个’&lt;’+”center”+’&gt;’（就是center左右两个尖括号）即可。 二：有序列表。(3个知识点)1.使用1（序号）+’.’+’ ‘+”XXX”，然后回车会自动加序号，中间添加或删除也会自动加减序号，而向下键无法自动调整序号；2.可以通过Tab和Shift+Tab实现列表的升降级；3.快捷键 Ctrl+Shift+[ 也可以快速生成列表格式（选中原有文字，然后按快捷键即可）。 三：无序列表。(4个知识点)1.使用’*’+’ ‘+”XXX”或’-‘+’ ‘+”XXX”来实现；2.同样可以使用Tab和Shift+Tab实现列表的升降级；3.有序列表和无需列表可以交错使用；4.无序列表的快捷键 Ctrl+Shift+] ，刚好和有序列表相反。 四：任务列表。(2个知识点)1.使用’-‘+’ ‘+’[‘+’ ‘+’]’+’ ‘+”XXX”来实现，注意中间的空格，最终任务列表前面的框我们可以手动打上勾。2.也可以选中写的文字，使用快捷键Ctrl+Shift+X实现。 五：插入表格。(4个知识点)1.通过|来进行表格创建，也可以使用快捷键Ctrl+T；2.添加行，通过Ctrl+回车；3.也可以在表格上面的选项中执行对齐、改变表格行列、插入删除行列和删除表格操作；(下图是PPT中，所以没有，但是在Typora中有)4.也可以在表格中按鼠标右键选择对应的操作。 Typora-代码类操作六：行内代码。(2个知识点)1.使用键盘的反引号&#96;，这是在英文输入法状态下的，如果是按Shift，就会变为~，所以要注意；2.也可以选择对应代码，按下快捷键Ctrl+Shift+&#96;。 七：代码块。(3个知识点)1.输入3个&#96;或三个~，再后面跟上对应的语言；2.建议提前在偏好设置中设置显示行号和自动换号，然后重启Typora生效；3.快捷键是Ctrl+Shift+K，可能会与搜狗输入法中打开键盘的快捷键冲突，故可以右键搜狗输入法，进入设置，在设置中把重合的快捷键关闭掉。 Typora-元素类操作八：上传图片。注：前往本网站的PicGo图片上传教程。 Typora-其他补充操作九：分割线。(1个知识点)1.输入三个*，或三个以上-，然后按回车即可。 十：字体。(1个知识点)1.如下图，左右两侧不同数量的*或_就是不同的字体。 十一：删除线、下划线和脚注。(3个知识点)1.删除线的格式就是左右两侧两个~~；2.下划线的格式就是一个u标签；3.脚注的内容先用[]括起来，最前面加上^，后面要有一个空格，最下方以同样的格式对其进行介绍。(非注释中[^]不能放在开头) 十二：区块引用。(3个知识点)1.使用’&gt;’+’ ‘+”XXX”使用区块引用，例如文章最后的请勿转载提示，就可以写在区块引用上。2.区块引用使用多个&gt;可以进行嵌套。3.区块引用和列表也可以互相嵌套。 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Makedown","slug":"Makedown","permalink":"http://example.com/tags/Makedown/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"JCM"},{"title":"PicGo图片上传教程","slug":"PicGo图片上传教程","date":"2023-02-07T01:37:46.000Z","updated":"2023-02-07T06:20:59.879Z","comments":true,"path":"2023/02/07/PicGo图片上传教程/","link":"","permalink":"http://example.com/2023/02/07/PicGo%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%95%99%E7%A8%8B/","excerpt":"","text":"PicGo图片上传教程一：下载安装。1.百度搜索picgo，然后进入github，网站： 2.进入github相应网站，然后点击右下角releases。 3.打开下载地址，对应电脑版本下载即可，我是x64版本。 4. 下载完，然后打开安装包安装即可。二：配置。1.打开后，在电脑右下角会显示，从中进入。 2.软件示例。 3.可以点开PicGo设置，选择你要使用的图床。（我用的是SM.MS，如果购买了腾讯云或阿里云使用那个更快些，GitHub可能比较慢，而且配置容易出错） 4.然后，在图床设置中选择Default进行编辑，需要获取对应的Token，我这里需要SM.MS的Token。 5.打开网址，点击右上角User登录注册。 6.注册登录后，点击User下的Dashboard。 7.然后点击左侧栏的API Token，然后点击Generate Secret Token即可，把上面的Secret Token复制到PicGo里面，然后把备用上传域名填上。 8.然后就选择对应的链接格式上传了。 9.上传成功后，在左侧的相册中就可以查看上传后的地址，也可以删除。（注意，复制地址时的格式，要在前面上传区的下面先选择好！比如我要复制的是URL，则要在上传区下面选择URL） 10.如果要把URL删除，在PicGo上删除的只是记录，而传上去的还在，所以要到SM.MS里面进行管理删除。 11.也可以不使用PicGo，通过SM.MS内部手动上传。 三：Typora连接PicGo，上传图片。1.先进入Typora软件，打开偏好设置。 2.点击左侧里面的图像，然后对下边进行配置，如果没有下载PicGo要先下载。 3.然后就可以使用了，举例：我们随便输字，然后截图。 截图： 4.直接复制粘贴这张图片到Typora中，它会自动转为Markdown格式并自动上传，然后看提示是否上传成功。 5.提示上传成功即可。 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"PicGo","slug":"PicGo","permalink":"http://example.com/tags/PicGo/"},{"name":"SM.MS","slug":"SM-MS","permalink":"http://example.com/tags/SM-MS/"}],"author":"JCM"},{"title":"零基础搭建博客教程","slug":"零基础搭建博客教程","date":"2023-02-06T03:34:22.000Z","updated":"2023-02-07T08:10:55.526Z","comments":true,"path":"2023/02/06/零基础搭建博客教程/","link":"","permalink":"http://example.com/2023/02/06/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/","excerpt":"","text":"零基础搭建博客教程一：安装程序。1.Node.js。（1）打开官网下载链接，我这里下载的是node-v6.9.2-x64.msi,如下图： （2）安装。1.下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js。 2.点击【Next】按钮。 3.勾选复选框，点击【Next】按钮。 4.修改好目录后，点击【Next】按钮。 5.安装完后点击【Finish】按钮完成安装。 （3）cmd查看。1.至此Node.js已经安装完成，可以先进行下简单的测试安装是否成功了，后面还要进行环境配置。在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口。 2.输入node-v显示node.js的版本说明安装成功，输入npm -v，如果显示npm版本说明自带的npm也安装成功。 3.然后进入对应安装位置的node.js目录，其中再新建node_cecal和node_global这两个空文件夹。 （4）环境配置。1.说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\\Users\\用户名\\AppData\\Roaming\\npm】路径中，占C盘空间。故：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【E:\\node.js】下创建两个文件夹【node_global】及【node_cache】如下图： 2.创建完两个空文件夹之后，打开cmd命令窗口，输入npm config set prefix “文件路径\\node_global”和npm config set cache “文件路径\\node_cache”。 3.接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”。 4.在系统变量中新建下面一项，注意路径是自己安装的目录，如我这里是XXX路径\\node_modules。 5.编辑环境变量Path。将下面这条修改为XX路径\\node_global。 修改后： （5）测试。输入npm install express -g，然后提示安装成功即可。（提示界面不同没关系，看到安装成功就行） （6）具体参考网站：https://www.cnblogs.com/liuqiyun/p/8133904.html 2.Git。1.获取Git安装程序，点此。 因为我们是用Windows系统上的浏览器访问的，Git官网自动之别到了我使用的操作系统，所以右侧直接显示下载使用Windows系统的最新版本（如果识别错误，可以在中间选择系统），点击即可下载。我下载的是 2.24.0 for Windows，文件名称是“Git-2.24.0.2-64-bit.exe”。下载到电脑上之后，鼠标双击这个文件即可进入安装过程。 （2）Git安装过程。双击看到的第一个界面如下图： 1.使用许可声明。 点击“Next”进入下图页面： 2.选择安装路径。 在输入框内输入想要安装到的本机路径，也就是实际文件夹位置，或点击“Browse…”选择已经存在的文件夹，然后点击“Next”按钮继续，进入下图界面： 3.选择安装组件。 上图红框内的选项是默认勾选的，建议不要动。绿色框1是决定是否在桌面创建快捷方式的。绿色框2是决定在所有控制台窗口中使用TrueType字体和是否每天检查Git是否有Windows更新的。这些根据自己需要选择。 点击“Next”按钮进入下图界面： 4.选择开始菜单页。 这个界面是创建开始菜单中的名称，不需要修改，直接点“Next”按钮继续到下图的界面： 5.选择Git文件默认的编辑器。 这个页面是在选择Git文件默认的编辑器，很少用到，所以默认Vim即可，直接点“Next”按钮继续到下图的界面： 6.调整您的PATH环境。 这个界面是调整您的PATH环境。 第一种配置是“仅从Git Bash使用Git”。这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。但是这将不能通过第三方软件使用。 第二种配置是“从命令行以及第三方软件进行Git”。该选项被认为是安全的，因为它仅向PATH添加了一些最小的Git包装器，以避免使用可选的Unix工具造成环境混乱。 您将能够从Git Bash，命令提示符和Windows PowerShell以及在PATH中寻找Git的任何第三方软件中使用Git。这也是推荐的选项。 第三种配置是“从命令提示符使用Git和可选的Unix工具”。警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。 我选择推荐的选项第二种配置，点击“Next”按钮继续到下图的界面： 7.选择HTTPS后端传输。 这个界面是选择HTTPS后端传输。 第一个选项是“使用 OpenSSL 库”。服务器证书将使用ca-bundle.crt文件进行验证。这也是我们常用的选项。 第二个选项是“使用本地 Windows 安全通道库”。服务器证书将使用Windows证书存储验证。此选项还允许您使用公司的内部根CA证书，例如通过Active Directory Domain Services 。 我使用默认选项第一项，点击“Next”按钮继续到下图的界面： 8.配置行尾符号转换。 这个界面是配置行尾符号转换。 第一个选项是“签出Windows风格，提交Unix风格的行尾”。签出文本文件时，Git会将LF转换为CRLF。提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Windows上的推荐设置（“ core.autocrlf”设置为“ true”） 第二个选项是“按原样签出，提交Unix样式的行尾”。签出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Unix上的建议设置（“ core.autocrlf”设置为“ input”） 第三种选项是“按原样签出，按原样提交”。当签出或提交文本文件时，Git不会执行任何转换。不建议跨平台项目选择此选项（“ core.autocrlf”设置为“ false”） 我选择第一种选项，点击“Next”按钮继续到下图的界面： 9.配置终端模拟器以与Git Bash一起使用。 这个界面是配置终端模拟器以与Git Bash一起使用。 第一个选项是“使用MinTTY（MSYS2的默认终端）”。Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和Unicode字体。Windows控制台程序（例如交互式Python）必须通过“ winpty”启动才能在MinTTY中运行。 第二个选项是“使用Windows的默认控制台窗口”。Git将使用Windows的默认控制台窗口（“cmd.exe”），该窗口可以与Win32控制台程序（如交互式Python或node.js）一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。 我选择默认的第一种选项，点击“Next”按钮继续到下图的界面： 10.配置额外的选项。 这个界面是配置额外的选项。 第一个选项是“启用文件系统缓存”。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）。 这提供了显著的性能提升。 第二个选项是“启用Git凭证管理器”。Windows的Git凭证管理器为Windows提供安全的Git凭证存储，最显着的是对Visual Studio Team Services和GitHub的多因素身份验证支持。 （需要.NET Framework v4.5.1或更高版本）。 第三个选项是“启用符号链接”。启用符号链接（需要SeCreateSymbolicLink权限）。请注意，现有存储库不受此设置的影响。 我勾选默认的第一、第二选项，点击“Next”按钮继续到下图的界面： 11.配置实验选项。 这个界面是配置实验选项。 启用实验性的内置添加 -i &#x2F; -p。（新！）使用实验性的内置交互式add（“ git add -i”或“ git add -p”）。这使其速度更快（尤其是启动！），但尚未被认为是可靠的。 默认不勾选，直接点击“Next”按钮继续到下图的安装进度界面： 12.安装进度指示。 安装进度结束之后，会出现下图的完成Git安装向导界面： 13.安装完成。 在这个界面，可以勾选是否启动启动Git Bash和是否查看发行说明，然后点“Finish”按钮退出安装界面。 （3）测试。 （4）具体参考网站：https://www.cnblogs.com/xueweisuoyong/p/11914045.html 3.Hexo。（1）直接在cmd中输入npm install hexo-cli -g，安装即可。（提示界面不同没关系，看到安装成功就行） （2）测试是否安装成功，输入npx hexo version，成功即可。 二：Github注册仓库。1. 注册github账号。（1）我们首先需要注册这个github号，进入网址，点此。 （2）进入看到的是如上页面。接下来点击右上角sign up。 （3）进来之后就开始注册你的信息了。1.注册。 2.在这里选择左边这个免费的。 3.进入qq邮箱，点击github发给你的消息，以此确定完成了你的github注册功能！！！ 4.我们现在回到页面，点击右上角Sign in来进行登录我们的github，输入账号密码即可。 （4）具体参考网站：https://www.bilibili.com/read/cv5107169/ 2.创建repository。（1）点击右上角账号，点击your repositories。 （2）点击new新建。 （3）输入Repository.name，需要注意的是需要填的内容XXX要与Owner的名字相同，例如XXX.github.io。 （4）下面的选择Public和Add a README file即可，其余多的都不需要，然后点击Create repository创建。 （5）创建repository成功。 （6）参考视频地址：https://www.bilibili.com/video/BV1mU4y1j72n?p=2&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 3.生成SSH Keys。（1）先随便进入电脑中的一个文件夹中（必须是一个文件夹中），右键选择Git Bash Here。 （2）先输入ssh，看到下面生成一串字符即可。 （3）输入ssh-keygen -t rsa -C “邮箱地址”，然后按四次回车即可。 （4）然后到电脑C盘的目录中去找.ssh文件夹中的id_rsa.pub，我这里是这个地方。 或者：右上角直接搜id_rsa.pub，但是如果C盘内容多，搜索慢。 （5）以记事本或其他软件打开，然后ctrl A+ctrl C复制即可。（无须改动里面的内容和格式） （6）重新回到github中，点击右上角头像，找到下面的Settings进入。 （7）进入后，在左侧栏中找到SSH and GPG keys这一项点击。 （8）然后点击New SSH key新建秘钥。 （9）填写内容，Title内随便写，Key中把刚刚复制来的内容放进去即可，无须改动内容和格式，然后点击Add SSH key即可。 （10）测试，在git中输入ssh -T &#x67;&#105;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;，提示成功即可。 （11）参考视频地址：https://www.bilibili.com/video/BV1mU4y1j72n?p=3&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 4.hexo本地生成博客内容。（1）在本地，随便选一个地方新建一个文件夹（名字随意，我这里是MyBlog），进入文件夹。 （2）同理，在空文件内右键点击Git Bash Here。 （3）先输入npm install -g hexo，重新安装一下，确保后续可行性。 （4）输入npx hexo init XXX（XXX内里的内容随便都行，我写的是github的用户名），然后就可以发现对应目录中生成了文件夹，打开里面就是hexo模板内容。 （5）然后cd XXX进入文件夹中，然后输入npx hexo s，即可打开本地的服务器的端口，下面显示http://localhost:4000，可以复制网址到浏览器中打开。 打开后就是模板： Git中按ctrl+C就可以关闭对应的端口，网页地址也就不能访问，下次想访问，再到这个文件夹内使用git输入npx hexo s即可。 （6）参考视频地址：https://www.bilibili.com/video/BV1mU4y1j72n?p=4&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 5.同步本地内容到github上，并发布博客到互联网中。（1）打开前面创建的本地博客文件夹，找到_config.yml文件，以记事本或其他软件打开。 （2）拉到最下面进行配置，添加deploy里面的内容，里面的type: git（type:后面有一个空格，即git前有一个空格）,branch: main（branch:后面有一个空格，即main前有一个空格），repository内容见文章后面。 （3）repository的内容，需要我们先进入前面创建的repository中，点击Code，然后把下面的内容复制进去即可。（注意形式和上面的type和branch一样，英文的冒号后面都有一个空格） （4）然后退出_config的编辑，在文件夹右键打开Git Bash Here，输入npm install hexo-deployer-git –save安装。 （5）再输入npx hexo g，生成镜像文件。 （6）之后就是部署内容到github上的环节，此次出错很多。输入npx hexo d，如下我就报错了。 （7）根据报错提示，再输入git config –global user.email “电子邮件内容”和git config –global user.name ”github用户名”。 (8)然后找到.deploy_git点击进入，我这里面有一个隐藏文件夹，点击上面的查看，把隐藏的项目点上。 (9)然后发现里面有一个隐藏的.git文件夹，进入找到config文件，用记事本或其他软件编辑。 找到工程目录的.git文件夹，打开之后找到config文件，在最后边加上一句话：[user]email&#x3D;your emailname&#x3D;your name (10)再运行npx hexo d，发现还是报错，提示unable to access，且SSL certificate problem:unable to get local issuer certficate。 (11)再输入git config –global http.sslVerify false和git push来接触SSL验证。 (12)最后再运行npx hexo d，会跳出一个类似登录界面，然后点击view in browse进入下面的浏览器，连接成功后，github项目中的内容也成功备份进来了。 (13)进入网址，先点击Settings，然后再左侧找到Pages，里面就可以找到网址，浏览器进入即可。 （14）剩下的就是blog的美化和样式整理，文件可以在本地修改，然后使用npx hexo d上传更新到git上即可。三：参考文献。1.【2021最新版】保姆级Hexo+github搭建个人博客：https://www.bilibili.com/video/BV1mU4y1j72n?p=1&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 2.hexo搭建个人博客超简单效果超好的个人网站博客搭建对小白很友好：https://www.bilibili.com/video/BV1Rt4y1k7it?p=1&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 3.【零基础】保姆级搭建个人博客hexo：https://www.bilibili.com/video/BV1WB4y1G7eW/?spm_id_from=333.788&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 4.hexo博客matery主题的个性化配置：https://blog.csdn.net/qq_41376237&#x2F;article&#x2F;details&#x2F;113475727?app_version&#x3D;5.10.0&amp;code&#x3D;app_1562916241&amp;csdn_share_tail&#x3D;%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22113475727%22%2C%22source%22%3A%22qq_74845080%22%7D&amp;uLinkId&#x3D;usr1mkqgl919blen&amp;utm_source&#x3D;app 四：写文章。1.在对应的根目录下（例如E:\\MyBlog\\jcm111859242）生成新文章，也是右键打开Git Bash Here，然后输入hexo new “文章名”生成。 2. 打开编写即可，但是Markdown类型文件最好下载一个编辑器，如Typora，下载参考：https://www.bilibili.com/video/BV14x4y137Kd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf 百度网盘： 链接：https://pan.baidu.com/s/1oE2SV06RolBLSJdyY0_LNw 提取码：svz3 （1）点击安装。 （2）安装时记得把下面这个勾上。 （3）右键安装后的Typora，打开文件所在位置，然后把安装包里面的winmm.dll压缩到这个里面即可。 （4）打开即可，发现已经破解，后续就可以正常使用。 3.对于Markdown类型，需要学习相关语法，点此。五：主题美化。1. 可以自己到官网或其他地方寻找hexo的主题，以volantis为例子，先到官网寻找。（1）搜索打开hexo官网，在主题中搜索volantis。 （2）进入浏览，我们可以点击源码，进入安装的github教程模块。 （3）进入官网，根据教程，需要找到hexo根目录下的_config.yml，将里面的theme后面内容改为volantis，然后再外面右键使用Git Bash Here，输入npm i hexo-theme-volantis安装。 （4）然后本地调试，输入npx hexo s，打开网址，就发现改成volantis格式了。 2.具体配置详见官方文档：https://volantis.js.org/v6/getting-started/ （1）简单的配置可以根据视频：https://www.bilibili.com/video/BV1GP4y1d729/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=c1ef3b7a869d417b009bf7c080cd53cf （2）为博客增加樱花特效和鼠标点击特效，在下面的文件目录中找到layout.ejs，然后添加下面的代码即可。 1234&lt;!-- 樱花特效 --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.5/sakura.js&quot;&gt;&lt;/script&gt;&lt;!-- 点击出现社会主义彩色文字 --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/shehuizhuyi.js&quot;&gt;&lt;/script&gt;&lt;!-- 点击出现爱心 --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/love.js&quot;&gt;&lt;/script&gt;&lt;!-- 点击出现彩色气球爆炸效果 --&gt;&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/clickBom.js&quot;&gt;&lt;/script&gt; 3.添加天气栏目。（1）我们使用心知天气，点此进入，先注册登录后，然后点击立即免费试用。 (2)然后创建插件，自行选择。 (3)点击生成代码，然后把上面JS块先复制。 (4)然后进入你主题文件夹中（我这里主题文件夹是hexo-theme-volantis），然后进入layout&#x2F;_partial中，找到header.ejs。 (5)然后复制到里面，我这里是复制到m_search上面，因为网页中布局放那里比较好。 (6)然后要在hexo的根目录的_config.yml中添加xinzhi_weather: true，就可在网页上看到效果。 本文为作者原创，请勿随意抄袭转载。","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}],"author":"JCM"}],"categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"},{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://example.com/tags/Visual-Studio/"},{"name":"c#","slug":"c","permalink":"http://example.com/tags/c/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"},{"name":"Makedown","slug":"Makedown","permalink":"http://example.com/tags/Makedown/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"PicGo","slug":"PicGo","permalink":"http://example.com/tags/PicGo/"},{"name":"SM.MS","slug":"SM-MS","permalink":"http://example.com/tags/SM-MS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]}